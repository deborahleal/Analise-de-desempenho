# -*- coding: utf-8 -*-
"""Gráficos_java.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VNavxmZOJ35kP6XkyMyCh0hK_U5qtz1n
"""

import matplotlib.pyplot as plt
import numpy as np


algoritmos = ['Bubble Sort', 'Quick Sort']

mediana_tempo = [1118859, 16726]
mediana_memoria = [769.08, 3432.64]
media_tempo = [1131443.50, 18726]
media_memoria = [805.04, 3559.65]  # em KB

fig, axs = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('Comparação Bubble Sort vs Quick Sort', fontsize=16)

# Gráfico 1: Mediana do Tempo
axs[0, 0].bar(algoritmos, mediana_tempo, color=['blue', 'orange'])
axs[0, 0].set_title('Mediana do Tempo de Execução')
axs[0, 0].set_ylabel('Tempo (ms)')
axs[0, 0].grid(axis='y', linestyle='--', alpha=0.7)


for i, v in enumerate(mediana_tempo):
    axs[0, 0].text(i, v + 0.05*max(mediana_tempo), f"{v:,}".replace(",", "."),
                  ha='center', va='bottom', fontweight='bold')

# Gráfico 2: Mediana da Memória
axs[0, 1].bar(algoritmos, mediana_memoria, color=['blue', 'orange'])
axs[0, 1].set_title('Mediana do Uso de Memória')
axs[0, 1].set_ylabel('Memória (KB)')
axs[0, 1].grid(axis='y', linestyle='--', alpha=0.7)


for i, v in enumerate(mediana_memoria):
    axs[0, 1].text(i, v + 0.05*max(mediana_memoria), f"{v:,.2f}".replace(",", "."),
                  ha='center', va='bottom', fontweight='bold')

# Gráfico 3: Média do Tempo
axs[1, 0].bar(algoritmos, media_tempo, color=['blue', 'orange'])
axs[1, 0].set_title('Média do Tempo de Execução')
axs[1, 0].set_ylabel('Tempo (ms)')
axs[1, 0].grid(axis='y', linestyle='--', alpha=0.7)


for i, v in enumerate(media_tempo):
    axs[1, 0].text(i, v + 0.05*max(media_tempo), f"{v:,.2f}".replace(",", "."),
                  ha='center', va='bottom', fontweight='bold')

# Gráfico 4: Média da Memória
axs[1, 1].bar(algoritmos, media_memoria, color=['blue', 'orange'])
axs[1, 1].set_title('Média do Uso de Memória')
axs[1, 1].set_ylabel('Memória (KB)')
axs[1, 1].grid(axis='y', linestyle='--', alpha=0.7)

for i, v in enumerate(media_memoria):
    axs[1, 1].text(i, v + 0.05*max(media_memoria), f"{v:,.2f}".replace(",", "."),
                  ha='center', va='bottom', fontweight='bold')


plt.tight_layout()
plt.show()